<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://ganshaya.github.io/hexo-project/atom.xml" rel="self"/>
  
  <link href="https://ganshaya.github.io/hexo-project/"/>
  <updated>2021-11-19T10:54:53.332Z</updated>
  <id>https://ganshaya.github.io/hexo-project/</id>
  
  <author>
    <name>包菜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Oracl 日常使用记录</title>
    <link href="https://ganshaya.github.io/hexo-project/2021/11/19/database/"/>
    <id>https://ganshaya.github.io/hexo-project/2021/11/19/database/</id>
    <published>2021-11-19T06:49:19.336Z</published>
    <updated>2021-11-19T10:54:53.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="时间加法"><a href="#时间加法" class="headerlink" title="时间加法"></a>时间加法</h3><ul><li>加1秒<blockquote><p>select to_char(sysdate+1/24/60/60,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; </p></blockquote></li><li>加1分钟<blockquote><p>select to_char(sysdate+1/24/60,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual;</p></blockquote></li><li>加1小时<blockquote><p>select to_char(sysdate+1/24,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; </p></blockquote></li><li>加1天<blockquote><p>select to_char(sysdate+1,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; </p></blockquote></li><li>加1星期<blockquote><p>select to_char(sysdate+7,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; </p></blockquote></li><li>加1月<blockquote><p>select add_months(sysdate,1) from dual; </p></blockquote></li><li>加1年<blockquote><p>select add_months(sysdate,12) from dual; </p></blockquote></li></ul><h3 id="时间减法"><a href="#时间减法" class="headerlink" title="时间减法"></a>时间减法</h3><ul><li>减1秒<blockquote><p>select to_char(sysdate-1/24/60/60,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; </p></blockquote></li><li>减1分钟<blockquote><p>select to_char(sysdate-1/24/60,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; </p></blockquote></li><li>减1小时<blockquote><p>select to_char(sysdate-1/24,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; </p></blockquote></li><li>减1天<blockquote><p>select to_char(sysdate-1,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; </p></blockquote></li><li>减1星期<blockquote><p>select to_char(sysdate-7,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; </p></blockquote></li><li>减1月<blockquote><p>select add_months(sysdate,-1) from dual; </p></blockquote></li><li>减1年<blockquote><p>select add_months(sysdate,-12) from dual; </p></blockquote></li></ul><h3 id="周"><a href="#周" class="headerlink" title="周"></a>周</h3><ul><li>本周一，本周末<blockquote><p>select trunc(sysdate, &#39;iw&#39;),trunc(sysdate, &#39;iw&#39;) + 6 from dual;</p></blockquote></li><li>本周在今年是第几周<blockquote><p>select to_char(sysdate,&#39;iw&#39;) from dual; </p><blockquote><p>ww：算法为每年1月1日为第一周开始，date+6为每一周结尾<br>例如:20050101为第一周的第一天，而第一周的最后一天为20050101 + 6 = 20050107　　<br>公式: 每周第一天 ：date + 周 * 7 - 7　　每周最后一天：date + 周 * 7 - 12）<br>iw：算法为星期一至星期日算一周，且每年的第一个星期一为第一周，<br>例如:20050101为星期六，所以用iw的算法是前年的53周，<br>而20050103之后才是第一周的开始。</p></blockquote></blockquote></li></ul><h3 id="月"><a href="#月" class="headerlink" title="月"></a>月</h3><ul><li>本月初，本月末<blockquote><p>select trunc(sysdate,&#39;month&#39;),add_months(trunc(sysdate,&#39;month&#39;),1) -1 from dual;</p></blockquote></li><li>当前是几月<blockquote><p>select to_char(sysdate,&#39;mm&#39;) from dual;</p></blockquote></li></ul><h3 id="季"><a href="#季" class="headerlink" title="季"></a>季</h3><ul><li>本季初，本季末<blockquote><p>select trunc(sysdate,&#39;q&#39;),add_months(trunc(sysdate,&#39;q&#39;),3)-1 from dual;</p></blockquote></li><li>当前是几季度<blockquote><p>select trunc((to_char(sysdate,&#39;mm&#39;)+2)/3) from dual;</p></blockquote></li></ul><h3 id="年（本年初，本年末）"><a href="#年（本年初，本年末）" class="headerlink" title="年（本年初，本年末）"></a>年（本年初，本年末）</h3><blockquote><p>select trunc(sysdate,&#39;yyyy&#39;),add_months(trunc(sysdate,&#39;yyyy&#39;),12) - 1 from dual;</p></blockquote><h3 id="匹配中文"><a href="#匹配中文" class="headerlink" title="匹配中文"></a>匹配中文</h3><blockquote><p>select regexp_replace(&lt;字段名&gt;,&#39;[^&#39;||unistr(&#39;\0391&#39;)||&#39;-&#39;||unistr(&#39;\9fa5&#39;)||&#39;]&#39;,&#39;&#39;)<br> from &lt;表明&gt;<br> where back_msg is not null</p></blockquote><h3 id="查询随机取一条"><a href="#查询随机取一条" class="headerlink" title="查询随机取一条"></a>查询随机取一条</h3><blockquote><p>select * from<br> (select * from 表明 order by dbms_random.value)<br> where rownum&lt;= 1;</p></blockquote><h3 id="表字段"><a href="#表字段" class="headerlink" title="表字段"></a>表字段</h3><ul><li>新增字段名，和字段描述<blockquote><p>alter table &lt;表明&gt; add &lt;字段名&gt; NUMBER(5) default ‘默认值’ null<br>comment on column &lt;表明&gt;.&lt;字段名&gt; is ‘字段描述’;</p></blockquote></li><li>修改字段描述<blockquote><p>comment on table &lt;表明&gt;.&lt;字段名&gt; is ‘需要修改的列描述’;</p></blockquote></li><li>修改表名称<blockquote><p>alter table  原表名称 rename to 新表名称;</p></blockquote></li></ul><h3 id="查询某时间段内，表数据被修改的内容"><a href="#查询某时间段内，表数据被修改的内容" class="headerlink" title="查询某时间段内，表数据被修改的内容"></a>查询某时间段内，表数据被修改的内容</h3><blockquote><p>select * from 表名 as of timestamp<br> to_timestamp(&#39;2021-10-01 10:00:00&#39;,&#39;yyyy-mm-dd hh24:mi:ss&#39;)<br> where user_id = 123456</p></blockquote><h3 id="行转列查询"><a href="#行转列查询" class="headerlink" title="行转列查询"></a>行转列查询</h3><blockquote><p>select * from<br> (select userid,name from 表名 where userid=123456)<br>  pivot(max(name) for name in<br>  (<br>   &#39;数据1&#39; as one,<br>   &#39;数据2&#39; AS two,<br>   &#39;数据3&#39; AS three)<br>   );</p></blockquote><h3 id="列转行查询"><a href="#列转行查询" class="headerlink" title="列转行查询"></a>列转行查询</h3><blockquote><p>select * from<br>  (select userid,name from 表名 where userid=123456)<br>  unpivot (<br>      name for describe in (one,two,three)<br>  );</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;时间加法&quot;&gt;&lt;a href=&quot;#时间加法&quot; class=&quot;headerlink&quot; title=&quot;时间加法&quot;&gt;&lt;/a&gt;时间加法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;加1秒&lt;blockquote&gt;
&lt;p&gt;select to_char(sysdate+1/24/60/60,&amp;#3</summary>
      
    
    
    
    <category term="数据库" scheme="https://ganshaya.github.io/hexo-project/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://ganshaya.github.io/hexo-project/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Git 安装 使用</title>
    <link href="https://ganshaya.github.io/hexo-project/2021/11/18/git-info/"/>
    <id>https://ganshaya.github.io/hexo-project/2021/11/18/git-info/</id>
    <published>2021-11-18T04:04:17.644Z</published>
    <updated>2021-11-19T06:50:16.710Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://git-scm.com/downloads">Git官网</a> 下载安装<br>已安装git可通过 git clone <a href="https://github.com/git/git">https://github.com/git/git</a> 获取最新的开发版本</li></ul><pre><code class="bash"># 查看仓库当前的状态git status# 主要用来初始化一个空的git本地仓库# 执行命令后，当前目录下会自动生成.git隐藏文件夹，该隐藏文件夹就是git版本库git init</code></pre><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><pre><code class="bash"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下git clone &lt;远程仓库的网址&gt;# 指定本地仓库的目录git clone &lt;远程仓库的网址&gt; &lt;本地目录&gt;# -b 指定要克隆的分支，默认是master分支git clone &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</code></pre><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><pre><code class="bash"># 列出本地已经存在的分支，并且在当前分支的前面用&quot;*&quot;标记git branch# 查看远程版本库分支列表git branch -r# 查看所有分支列表，包括本地和远程git branch -a # 创建名为dev的分支，创建分支时需要是最新的环境，创建分支但依然停留在当前分支git branch dev# 删除dev分支，如果在分支中有一些未merge的提交，那么会删除分支失败，此时可以使用 git branch -D dev: 强制删除dev分支git branch -d dev # 可以查看本地分支对应的远程分支git branch -vv# 给分支重命名git branch -m oldName newName# 设置本地分支，追踪远程分支git branch --set-upstream-to=origin/&lt;远程分支&gt; &lt;本地分支&gt;  </code></pre><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><pre><code class="bash"># 核查工作区相对于版本库修改过的文件git checkout# 切换分支git checkout &lt;分支名&gt;# 创建新分支并切换到新分支git checkout -b  &lt;分支名&gt;# 以当前分支的commitId提交节点，创建新的分支并切换到新分支，此时工作区的内容和切换分之前commitId提交节点的内容一样git checkout -b &lt;分支名&gt; commitId # 当没有提交版本号时将工作区的指定文件的内容恢复到暂存区的状态git checkout -- filename# 将工作区的所有文件的内容恢复到暂存区的状态git checkout .  # 当有提交版本号时，表示将工作区和暂存区都恢复到版本库，指定提交版本的指定文件的状态，此时HEAD指针不变# 此时的状态相当于把工作区的内容修改到指定版本的文件内容后，再把修改的内容添加到暂存区。git checkout &lt;commit&gt; filename</code></pre><h3 id="git-add-and-commit"><a href="#git-add-and-commit" class="headerlink" title="git add and commit"></a>git add and commit</h3><pre><code class="bash"># 默认将修改操作的文件，和新添加的文件放入暂存区，不包括删除文件git add# 将修改和删除的文件，添加到暂存区git add -u  # 将所有的已跟踪的，文件的修改与删除，和新增的未跟踪的文件，都添加到暂存区git add -A  # 将暂存区里的改动给提交到本地的版本库git commit         # 提交到本地仓库并添加描述信息git commit -m &quot;&quot;# 追加提交，它可以在不增加一个新的commit-id的情况下将新修改的代码追加到前一次的commit-id中git commit -amend  </code></pre><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><pre><code class="bash"># 将本地的分支推送到远程主机上的对应分支 一般origin为远程主机名 git push origin &lt;本地分支名&gt;:&lt;远程分支名&gt;  # 省略本地分支名，表示删除指定的远程分支，等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete mastergit push origin :&lt;远程分支名&gt;# 省略远程分支名，表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建git push origin &lt;本地分支名&gt; # 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支git push origin# 将本地的分支版本上传到远程并合并git push# 把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，# 在以后的推送或者拉取时就可以简化命令，直接使用 git pushgit push -u origin master</code></pre><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><pre><code class="bash"># 取回远程主机某个分支的更新，再与本地的指定分支合并# 例如：git pull origin master:brantest将远程主机origin的master分支拉取过来，与本地的brantest分支合并git pull origin &lt;远程分支名&gt;:&lt;本地分支名&gt; # 取回origin/master分支，与当前分支合并git pull origin master# 用于合并指定分支到当前分支git merge </code></pre><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><pre><code class="bash"># 按提交时间列出所有的更新，最近的更新排在最上面git log# 仅显示简要的增改行数统计git log --stat# 代码审查，展开内容差异 最后加上-2 则仅显示最近的两次更新git log -p# 记录你的每一次提交，查看版本commitIdgit reflog     </code></pre><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><pre><code class="bash"># 回退操作git reset# 移除不必要的添加到暂存区的文件 HEAD指向的版本就是当前版本git reset HEAD 文件名# 去掉上一次的提交git reset HEAD^ 或者 commitid # 会回到rebase操作之前的状态，之前的提交的不会丢弃git rebase --abort# 将引起冲突的commits丢弃掉 git rebase --skip# 用于修复冲突，提示开发者，一步一步地有没有解决冲突git rebase --continue# 只是将HEAD引用指向指定的提交，工作区跟暂存区的内容不会改变git reset --soft# 修改上次提交的信息,即commit -m &quot;修改这里的内容&quot;git reset --soft  HEAD^# 仅仅只是撤销已提交的版本库，不会修改暂存区和工作区git reset --soft 版本库ID # 将HEAD指向指定的提交，暂存区的内容随之改变，工作区内容不变git reset --mixed# 仅仅只是撤销已提交的版本库和暂存区，不会修改工作区git reset --mixed 版本库ID# 将HEAD指向指定的提交，暂存区跟工作区都会改变git reset --hard# 彻底将工作区、暂存区和版本库记录恢复到指定的版本库git reset --hard 版本库ID </code></pre><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><pre><code class="bash"># 可以找出你项目上任意两点间 的改动，或是用来查看别人提交进来的新分支git diff# 显示你当前工作目录与另外一个叫&#39;test&#39;分支的差别。你也以加上路径限定符，来只 比较某一个文件或目录git diff test# 显示两个分支（master 和 test）间的差异# 如果你想找出 &#39;master&#39;,&#39;test&#39; 的共有 父分支和&#39;test&#39;分支之间的差异，你用3个&#39;.&#39;来取代（git diff master ... test）git diff master..test# 显示你当前的索引和上次提交间的差异git diff --cached# 显示你工作目录与上次提交时之间的所有差别git diff HEAD# 显示你当前工作目录下的lib目录与上次提交之间的差别git diff HEAD -- ./lib</code></pre><h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><pre><code class="bash"># 保存当前的工作区与暂存区的状态，把当前的工作隐藏起来，等以后需要的时候再恢复，git stash 这个命令可以多次使用，每次使用都会新加一个stash@&#123;num&#125;，num是编号git stash# 查看所有被隐藏的文件列表git stash list# 默认恢复git栈中最新的一个stash@&#123;num&#125;，建议在git栈中只有一条的时候使用，以免混乱，恢复的同时把stash内容删掉git stash pop# 恢复被隐藏的文件git stash apply# 如果我们在git stash apply 的时候工作目录下的文件一部分已经加入了暂存区，部分文件没有# 当我们执行git stash apply之后发现所有的文件都变成了未暂存的，如果想维持原来的样子# 即暂存过的依旧是暂存状态，那么可以使用 git stash apply --index# 删除指定的一个进度，默认删除最新的进度，使用方法如git stash drop stash@&#123;0&#125;git stash drop# 删除所有存储的进度git stash clear# 显示stash的内容具体是什么，使用方法如 git stash show stash@&#123;0&#125; git stash show</code></pre><h3 id="git配置别名"><a href="#git配置别名" class="headerlink" title="git配置别名"></a>git配置别名</h3><pre><code class="bash"># --global 针对当前用户起作用，如果不加，只针对当前仓库起作用# 别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。# 当前仓库的配置文件，放在项目.git/config中# 当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中git config --global alias.ffs &#39;flow feature start&#39;</code></pre><h3 id="github新建仓库，链接本地"><a href="#github新建仓库，链接本地" class="headerlink" title="github新建仓库，链接本地"></a>github新建仓库，链接本地</h3><pre><code class="bash">本地没有仓库，新建文件，进入文件，初始化gitmkdir projectcd projectgit inittouch README.mdgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin git@gitee.com:darkiy/project.gitgit push -u origin master本地已有仓库cd projectgit remote add origin git@gitee.com:darkiy/project.gitgit push -u origin master</code></pre><h3 id="清空远程仓库"><a href="#清空远程仓库" class="headerlink" title="清空远程仓库"></a>清空远程仓库</h3><pre><code class="bash">git initgit add .git commit -m &quot;Initial commit&quot;git remote add origin git@github.com:&lt;YOUR ACCOUNT&gt;/&lt;YOUR REPOS&gt;.gitgit push -u --force origin master</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;Git官网&lt;/a&gt; 下载安装&lt;br&gt;已安装git可通过 git clone &lt;a href=&quot;https://github.com/git/git&quot;&gt;https://github.c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo安装及命令</title>
    <link href="https://ganshaya.github.io/hexo-project/2021/11/17/hexo-command/"/>
    <id>https://ganshaya.github.io/hexo-project/2021/11/17/hexo-command/</id>
    <published>2021-11-17T03:18:51.240Z</published>
    <updated>2021-11-18T08:47:00.549Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo官网</a></li><li><a href="https://hexo.io/themes/">官网主题</a></li><li><a href="https://blog.cofess.com/">Pure主题</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="bash">npm install -g hexo-cli   # 安装hexohexo version              # 查看Hexo的版本hexo init                 # 初始化本地文件夹为网站的根目录cnpm install              # 安装nodehexo help                 # 查看帮助</code></pre><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><pre><code class="bash">hexo new &quot;postName&quot;     # 新建文章                -p      # 自定义新文章的路径                -r      # 存在同名文章，将其替换                -s      # 作为新文章的文件名和发布后的URLhexo new page &quot;about&quot;   # 新建页面about</code></pre><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><pre><code class="bash">hexo server   # 开启访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）         -p   # 重设端口         -s   # 只使用静态文件         -i   # 自定义 IP</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre><code class="bash">首先在github上创建一个公共的仓库打在hexo站点配置文件_config.yml，themes里面的是主题配置文件配置：deploy:  type: git  repo: git@github.com:&lt;用户名&gt;/hexo-project.git (git仓库ssh地址)  branch: master安装git部署插件：cnpm install hexo-deployer-git --save开始部署:hexo clean   # 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 hexo g       # 生成静态文件     -d      # 文件生成后立即部署网站     -w      # 监视文件变动     -b      # 生成过程中如果发生任何未处理的异常则抛出异常     -f      # 强制重新生成改动的文件。如果public目录存在，那么会重新生成改动的文件     -c      # 最大生成文件数量，默认无限制hexo d       # 部署之前预先生成的静态文件     -g      # 部署前预先生成</code></pre><h3 id="文章内容设置"><a href="#文章内容设置" class="headerlink" title="文章内容设置"></a>文章内容设置</h3><pre><code class="bash">文章头部---title: &lt;文章标题&gt;date: &lt;设置时间&gt;tags: - &lt;设置标签&gt;categories: - &lt;设置分类&gt;---</code></pre><pre><code class="bash">标题：#  一级标题## 二级标题#号个数 + 空格 + 文字，分别表示h1-h6，只到h6，而且h1下面会有一条横线</code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><pre><code class="bash">列表：* 1  * 2* 3 无序列表可以用（* 或 + 或—）来创建1. 列表12. 列表23. 列表3有序列表 数字 + 英文的点</code></pre><ul><li>1</li><li>2</li><li>3</li></ul><ol><li>列表1</li><li>列表2</li><li>列表3</li></ol><pre><code class="bash">引用：&gt;  一级引用&gt;&gt; 二级引用&gt;&gt; 英文右尖括号 + 引用信息</code></pre><blockquote><p>一级引用</p><blockquote><p>二级引用</p></blockquote></blockquote><pre><code class="bash">分割线*** 星号--- 减号___ 底线都可作为分隔线，至少需要3个</code></pre><hr><pre><code class="bash">链接行内式[百度](https://www.baidu.com)参数式[百度]:https://www.baidu.com这里是[百度]</code></pre><p><a href="https://www.baidu.com/">百度</a></p><p>这里是<a href="https://www.baidu.com/">百度</a></p><pre><code class="bash">图片用户和链接基本一样，图片前面要写一个！![我是图片](https://img0.baidu.com/it/u=3927459320,2138990686&amp;fm=26&amp;fmt=auto) </code></pre><pre><code class="bash">代码框单行用 ` (代码段) `多行用 ``` (代码段)  ```</code></pre><pre><code class="bash">强调*字体倾斜*_字体倾斜_** 字体加粗 **__ 字体加粗 __</code></pre><p><em>字体倾斜</em><br><strong>字体加粗</strong></p><pre><code class="bash">删除线~~请删掉我~~</code></pre><p><del>请删掉我</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;Hexo官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/themes/&quot;&gt;官网主题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog</summary>
      
    
    
    
    
  </entry>
  
</feed>
