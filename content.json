{"meta":{"title":"Hexo","subtitle":"","description":"","author":"包菜","url":"https://ganshaya.github.io/hexo-project","root":"/hexo-project/"},"pages":[{"title":"分类","date":"2021-11-16T04:21:36.295Z","updated":"2021-11-16T02:45:04.814Z","comments":false,"path":"categories/index.html","permalink":"https://ganshaya.github.io/hexo-project/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2021-11-16T04:21:36.281Z","updated":"2021-11-16T02:45:04.855Z","comments":false,"path":"/404.html","permalink":"https://ganshaya.github.io/hexo-project/404.html","excerpt":"","text":""},{"title":"工具","date":"2021-11-16T10:05:51.612Z","updated":"2021-11-16T10:05:51.574Z","comments":false,"path":"tool/index.html","permalink":"https://ganshaya.github.io/hexo-project/tool/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-11-16T04:21:36.315Z","updated":"2021-11-16T02:45:04.846Z","comments":false,"path":"tags/index.html","permalink":"https://ganshaya.github.io/hexo-project/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"正则表达式","slug":"regular-expression","date":"2021-11-19T16:00:00.000Z","updated":"2022-01-21T03:08:47.246Z","comments":true,"path":"2021/11/20/regular-expression/","link":"","permalink":"https://ganshaya.github.io/hexo-project/2021/11/20/regular-expression/","excerpt":"","text":"基本语法^ 匹配输入字符串开始位置 $ 匹配输入字符串结束位置 () 子表达式开始和结束位置 . 匹配除换行符\\n之外的任何单字符 A* 匹配任意个数字符 空，A，AA，AAA A+ 匹配至少一次或多次字符 A，AA，AAA A? 匹配0个或1个字符 空，A A&#123;3&#125; 指定个数字符 AAA A&#123;2,3&#125; 指定范围个数字符 AA，AAA A&#123;2,&#125; 至少n个字符 AA，AAA，AAAA，... A&#123;0,3&#125; 最多n个字符 空，A，AA，AAA [ABC] 范围内字符 A，B，C [A-F] 范围内任意字符 A，B，C...F [0-9] 范围内任意数字 0，2，3...9 [^A-F] 反向范围内任意字符 非A-F AB|CD AB或CD AB，CD 匹配符\\\\d 数字字符匹配 \\\\D 非数字字符匹配 \\\\w 匹配任何字类字符 \\\\W 匹配任何非字类字符 \\\\s 匹配任何空白字符 \\\\S 匹配任何非空白字符 \\\\f 换页符匹配 \\\\n 换行符匹配 \\\\r 匹配一个回车符 \\\\t 制表符匹配 \\\\u4e00-\\\\u9fa5 匹配汉字 是否匹配","categories":[],"tags":[]},{"title":"Oracl 使用记录","slug":"database","date":"2021-11-19T06:49:19.336Z","updated":"2022-01-20T06:50:08.017Z","comments":true,"path":"2021/11/19/database/","link":"","permalink":"https://ganshaya.github.io/hexo-project/2021/11/19/database/","excerpt":"","text":"表字段 新增字段名，和字段描述 alter table &lt;表明&gt; add &lt;字段名&gt; NUMBER(5) default ‘默认值’ nullcomment on column &lt;表明&gt;.&lt;字段名&gt; is ‘字段描述’; 修改字段描述 comment on table &lt;表明&gt;.&lt;字段名&gt; is ‘需要修改的列描述’; 修改表名称 alter table 原表名称 rename to 新表名称; 匹配中文 select regexp_replace(&lt;字段名&gt;,&#39;[^&#39;||unistr(&#39;\\0391&#39;)||&#39;-&#39;||unistr(&#39;\\9fa5&#39;)||&#39;]&#39;,&#39;&#39;) from &lt;表明&gt; where back_msg is not null 查询随机一条 select * from (select * from 表明 order by dbms_random.value) where rownum&lt;= 1; 查询连续的数据 select (c.maxDay - c.minDay) + 1 as continuous&thinsp;from ( select min(b.day) minDay, max(b.day) maxDay from ( select a.day, rownum, a.day - rownum as dayNum from ( select day from 表名 t where userid = 1234 order by day asc ) a ) b group by b.dayNum order by b.dayNum asc ) c where rownum = 1 连续数据上一条和下一条比较 LAG函数可以在一次查询中取出当前行的同一字段的前面第N行的数据lag(userId, N) over(order by userId desc)LEAD函数可以在一次查询中取出当前行的同一字段的后面第N行的值lead(userId, N) over (order by userId asc) as afterId 查询某时间段内，表数据被修改的内容 select * from 表名 as of timestamp to_timestamp(&#39;2021-10-01 10:00:00&#39;,&#39;yyyy-mm-dd hh24:mi:ss&#39;) where user_id = 123456 行转列查询 select * from (select userid,name from 表名 where userid=123456) pivot(max(name) for name in ( &#39;数据1&#39; as one, &#39;数据2&#39; AS two, &#39;数据3&#39; AS three) ); 列转行查询 select * from (select userid,name from 表名 where userid=123456) unpivot ( name for describe in (one,two,three) ); 时间加法 加1秒 select to_char(sysdate+1/24/60/60,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 加1分钟 select to_char(sysdate+1/24/60,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 加1小时 select to_char(sysdate+1/24,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 加1天 select to_char(sysdate+1,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 加1星期 select to_char(sysdate+7,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 加1月 select add_months(sysdate,1) from dual; 加1年 select add_months(sysdate,12) from dual; 时间减法 减1秒 select to_char(sysdate-1/24/60/60,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 减1分钟 select to_char(sysdate-1/24/60,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 减1小时 select to_char(sysdate-1/24,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 减1天 select to_char(sysdate-1,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 减1星期 select to_char(sysdate-7,&#39;yyyy-mm-dd HH24:MI:SS&#39;) from dual; 减1月 select add_months(sysdate,-1) from dual; 减1年 select add_months(sysdate,-12) from dual; 周 本周一，本周末 select trunc(sysdate, &#39;iw&#39;),trunc(sysdate, &#39;iw&#39;) + 6 from dual; 本周在今年是第几周 select to_char(sysdate,&#39;iw&#39;) from dual; ww：算法为每年1月1日为第一周开始，date+6为每一周结尾例如:20050101为第一周的第一天，而第一周的最后一天为20050101 + 6 = 20050107 公式: 每周第一天 ：date + 周 * 7 - 7 每周最后一天：date + 周 * 7 - 12）iw：算法为星期一至星期日算一周，且每年的第一个星期一为第一周，例如:20050101为星期六，所以用iw的算法是前年的53周，而20050103之后才是第一周的开始。 月 本月初，本月末 select trunc(sysdate,&#39;month&#39;),add_months(trunc(sysdate,&#39;month&#39;),1) -1 from dual; 当前是几月 select to_char(sysdate,&#39;mm&#39;) from dual; 季 本季初，本季末 select trunc(sysdate,&#39;q&#39;),add_months(trunc(sysdate,&#39;q&#39;),3)-1 from dual; 当前是几季度 select trunc((to_char(sysdate,&#39;mm&#39;)+2)/3) from dual; 年（本年初，本年末） select trunc(sysdate,&#39;yyyy&#39;),add_months(trunc(sysdate,&#39;yyyy&#39;),12) - 1 from dual;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://ganshaya.github.io/hexo-project/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://ganshaya.github.io/hexo-project/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Git 安装 使用","slug":"git-info","date":"2021-11-18T04:04:17.644Z","updated":"2021-11-19T06:50:16.710Z","comments":true,"path":"2021/11/18/git-info/","link":"","permalink":"https://ganshaya.github.io/hexo-project/2021/11/18/git-info/","excerpt":"","text":"Git官网 下载安装已安装git可通过 git clone https://github.com/git/git 获取最新的开发版本 # 查看仓库当前的状态 git status # 主要用来初始化一个空的git本地仓库 # 执行命令后，当前目录下会自动生成.git隐藏文件夹，该隐藏文件夹就是git版本库 git init git clone# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下 git clone &lt;远程仓库的网址&gt; # 指定本地仓库的目录 git clone &lt;远程仓库的网址&gt; &lt;本地目录&gt; # -b 指定要克隆的分支，默认是master分支 git clone &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt; git branch# 列出本地已经存在的分支，并且在当前分支的前面用&quot;*&quot;标记 git branch # 查看远程版本库分支列表 git branch -r # 查看所有分支列表，包括本地和远程 git branch -a # 创建名为dev的分支，创建分支时需要是最新的环境，创建分支但依然停留在当前分支 git branch dev # 删除dev分支，如果在分支中有一些未merge的提交，那么会删除分支失败，此时可以使用 git branch -D dev: 强制删除dev分支 git branch -d dev # 可以查看本地分支对应的远程分支 git branch -vv # 给分支重命名 git branch -m oldName newName # 设置本地分支，追踪远程分支 git branch --set-upstream-to=origin/&lt;远程分支&gt; &lt;本地分支&gt; git checkout# 核查工作区相对于版本库修改过的文件 git checkout # 切换分支 git checkout &lt;分支名&gt; # 创建新分支并切换到新分支 git checkout -b &lt;分支名&gt; # 以当前分支的commitId提交节点，创建新的分支并切换到新分支，此时工作区的内容和切换分之前commitId提交节点的内容一样 git checkout -b &lt;分支名&gt; commitId # 当没有提交版本号时将工作区的指定文件的内容恢复到暂存区的状态 git checkout -- filename # 将工作区的所有文件的内容恢复到暂存区的状态 git checkout . # 当有提交版本号时，表示将工作区和暂存区都恢复到版本库，指定提交版本的指定文件的状态，此时HEAD指针不变 # 此时的状态相当于把工作区的内容修改到指定版本的文件内容后，再把修改的内容添加到暂存区。 git checkout &lt;commit&gt; filename git add and commit# 默认将修改操作的文件，和新添加的文件放入暂存区，不包括删除文件 git add # 将修改和删除的文件，添加到暂存区 git add -u # 将所有的已跟踪的，文件的修改与删除，和新增的未跟踪的文件，都添加到暂存区 git add -A # 将暂存区里的改动给提交到本地的版本库 git commit # 提交到本地仓库并添加描述信息 git commit -m &quot;&quot; # 追加提交，它可以在不增加一个新的commit-id的情况下将新修改的代码追加到前一次的commit-id中 git commit -amend git push# 将本地的分支推送到远程主机上的对应分支 一般origin为远程主机名 git push origin &lt;本地分支名&gt;:&lt;远程分支名&gt; # 省略本地分支名，表示删除指定的远程分支，等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master git push origin :&lt;远程分支名&gt; # 省略远程分支名，表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建 git push origin &lt;本地分支名&gt; # 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 git push origin # 将本地的分支版本上传到远程并合并 git push # 把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来， # 在以后的推送或者拉取时就可以简化命令，直接使用 git push git push -u origin master git pull# 取回远程主机某个分支的更新，再与本地的指定分支合并 # 例如：git pull origin master:brantest将远程主机origin的master分支拉取过来，与本地的brantest分支合并 git pull origin &lt;远程分支名&gt;:&lt;本地分支名&gt; # 取回origin/master分支，与当前分支合并 git pull origin master # 用于合并指定分支到当前分支 git merge git log# 按提交时间列出所有的更新，最近的更新排在最上面 git log # 仅显示简要的增改行数统计 git log --stat # 代码审查，展开内容差异 最后加上-2 则仅显示最近的两次更新 git log -p # 记录你的每一次提交，查看版本commitId git reflog git reset# 回退操作 git reset # 移除不必要的添加到暂存区的文件 HEAD指向的版本就是当前版本 git reset HEAD 文件名 # 去掉上一次的提交 git reset HEAD^ 或者 commitid # 会回到rebase操作之前的状态，之前的提交的不会丢弃 git rebase --abort # 将引起冲突的commits丢弃掉 git rebase --skip # 用于修复冲突，提示开发者，一步一步地有没有解决冲突 git rebase --continue # 只是将HEAD引用指向指定的提交，工作区跟暂存区的内容不会改变 git reset --soft # 修改上次提交的信息,即commit -m &quot;修改这里的内容&quot; git reset --soft HEAD^ # 仅仅只是撤销已提交的版本库，不会修改暂存区和工作区 git reset --soft 版本库ID # 将HEAD指向指定的提交，暂存区的内容随之改变，工作区内容不变 git reset --mixed # 仅仅只是撤销已提交的版本库和暂存区，不会修改工作区 git reset --mixed 版本库ID # 将HEAD指向指定的提交，暂存区跟工作区都会改变 git reset --hard # 彻底将工作区、暂存区和版本库记录恢复到指定的版本库 git reset --hard 版本库ID git diff# 可以找出你项目上任意两点间 的改动，或是用来查看别人提交进来的新分支 git diff # 显示你当前工作目录与另外一个叫&#39;test&#39;分支的差别。你也以加上路径限定符，来只 比较某一个文件或目录 git diff test # 显示两个分支（master 和 test）间的差异 # 如果你想找出 &#39;master&#39;,&#39;test&#39; 的共有 父分支和&#39;test&#39;分支之间的差异，你用3个&#39;.&#39;来取代（git diff master ... test） git diff master..test # 显示你当前的索引和上次提交间的差异 git diff --cached # 显示你工作目录与上次提交时之间的所有差别 git diff HEAD # 显示你当前工作目录下的lib目录与上次提交之间的差别 git diff HEAD -- ./lib git stash# 保存当前的工作区与暂存区的状态，把当前的工作隐藏起来，等以后需要的时候再恢复，git stash 这个命令可以多次使用，每次使用都会新加一个stash@&#123;num&#125;，num是编号 git stash # 查看所有被隐藏的文件列表 git stash list # 默认恢复git栈中最新的一个stash@&#123;num&#125;，建议在git栈中只有一条的时候使用，以免混乱，恢复的同时把stash内容删掉 git stash pop # 恢复被隐藏的文件 git stash apply # 如果我们在git stash apply 的时候工作目录下的文件一部分已经加入了暂存区，部分文件没有 # 当我们执行git stash apply之后发现所有的文件都变成了未暂存的，如果想维持原来的样子 # 即暂存过的依旧是暂存状态，那么可以使用 git stash apply --index # 删除指定的一个进度，默认删除最新的进度，使用方法如git stash drop stash@&#123;0&#125; git stash drop # 删除所有存储的进度 git stash clear # 显示stash的内容具体是什么，使用方法如 git stash show stash@&#123;0&#125; git stash show git配置别名# --global 针对当前用户起作用，如果不加，只针对当前仓库起作用 # 别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。 # 当前仓库的配置文件，放在项目.git/config中 # 当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中 git config --global alias.ffs &#39;flow feature start&#39; github新建仓库，链接本地本地没有仓库，新建文件，进入文件，初始化git mkdir project cd project git init touch README.md git add README.md git commit -m &quot;first commit&quot; git remote add origin git@gitee.com:darkiy/project.git git push -u origin master 本地已有仓库 cd project git remote add origin git@gitee.com:darkiy/project.git git push -u origin master 清空远程仓库git init git add . git commit -m &quot;Initial commit&quot; git remote add origin git@github.com:&lt;YOUR ACCOUNT&gt;/&lt;YOUR REPOS&gt;.git git push -u --force origin master","categories":[],"tags":[]},{"title":"Hexo安装及命令","slug":"hexo-command","date":"2019-10-10T16:00:00.000Z","updated":"2022-01-20T06:55:37.057Z","comments":true,"path":"2019/10/11/hexo-command/","link":"","permalink":"https://ganshaya.github.io/hexo-project/2019/10/11/hexo-command/","excerpt":"","text":"Hexo官网 官网主题 Pure主题 安装npm install -g hexo-cli # 安装hexo hexo version # 查看Hexo的版本 hexo init # 初始化本地文件夹为网站的根目录 cnpm install # 安装node hexo help # 查看帮助 新建文章hexo new &quot;postName&quot; # 新建文章 -p # 自定义新文章的路径 -r # 存在同名文章，将其替换 -s # 作为新文章的文件名和发布后的URL hexo new page &quot;about&quot; # 新建页面about 启动服务器hexo server # 开启访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server） -p # 重设端口 -s # 只使用静态文件 -i # 自定义 IP 部署首先在github上创建一个公共的仓库 打在hexo站点配置文件_config.yml，themes里面的是主题配置文件 配置： deploy: type: git repo: git@github.com:&lt;用户名&gt;/hexo-project.git (git仓库ssh地址) branch: master 安装git部署插件： cnpm install hexo-deployer-git --save 开始部署: hexo clean # 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 hexo g # 生成静态文件 -d # 文件生成后立即部署网站 -w # 监视文件变动 -b # 生成过程中如果发生任何未处理的异常则抛出异常 -f # 强制重新生成改动的文件。如果public目录存在，那么会重新生成改动的文件 -c # 最大生成文件数量，默认无限制 hexo d # 部署之前预先生成的静态文件 -g # 部署前预先生成 文章内容设置文章头部 --- title: &lt;文章标题&gt; date: &lt;设置时间&gt; tags: - &lt;设置标签&gt; categories: - &lt;设置分类&gt; --- 标题： # 一级标题 ## 二级标题 #号个数 + 空格 + 文字，分别表示h1-h6，只到h6，而且h1下面会有一条横线 一级标题二级标题列表： * 1 * 2 * 3 无序列表可以用（* 或 + 或—）来创建 1. 列表1 2. 列表2 3. 列表3 有序列表 数字 + 英文的点 1 2 3 列表1 列表2 列表3 引用： &gt; 一级引用 &gt;&gt; 二级引用 &gt;&gt; 英文右尖括号 + 引用信息 一级引用 二级引用 分割线 *** 星号 --- 减号 ___ 底线 都可作为分隔线，至少需要3个 链接 行内式 [百度](https://www.baidu.com) 参数式 [百度]:https://www.baidu.com 这里是[百度] 百度 这里是百度 图片和链接基本一样，图片前面要写一个！ ![我是图片](https://img2.baidu.com/it/u=3241679689,4169893465&amp;fm=26&amp;fmt=auto) 设置图片大小，如下图 &lt;img style=&quot;width:30%;height:30%&quot; src=&quot;https://img2.baidu.com/it/u=3241679689,4169893465&amp;fm=26&amp;fmt=auto&quot; alt=&quot;图片&quot; align=center /&gt; 代码框 单行用 ` (代码段) ` 多行用 ``` (代码段) ``` 强调 *字体倾斜* _字体倾斜_ ** 字体加粗 ** __ 字体加粗 __ 字体倾斜字体加粗 删除线 ~~请删掉我~~ 请删掉我","categories":[],"tags":[]}],"categories":[{"name":"数据库","slug":"数据库","permalink":"https://ganshaya.github.io/hexo-project/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://ganshaya.github.io/hexo-project/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}